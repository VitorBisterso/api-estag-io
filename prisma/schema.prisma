generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum BusinessCategory {
  AUTOMOTIVE
  BANK
  CONSUMER_GOODS
  FOOD_AND_BEVERAGES
  EDUCATION
  CONSTRUCTION_COMPANY
  PHARMACEUTICAL_AND_CHEMICALS
  HOSPITAL_AND_HEALTH_PLAN
  INDUSTRY
  LOGISTICS
  MEDIA_AND_ADVERTISING
  NGO
  OIL_ENERGY_AND_ENVIRONMENTAL
  HEALTH_AND_WELL_BEING
  INSURANCE_COMPANY
  FINANCIAL_SERVICES
  RETAIL
  IT_AND_TELECOMMUNICATIONS
}

enum OpportunityType {
  REMOTE
  LOCAL
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email              String   @unique
  name               String
  password           String
  birthday           DateTime
  resetPasswordToken String?

  reviews       Review[]
  opportunities OpportunityUser[]
  processSteps  ProcessStep[]
  internship    Internship?
}

model Company {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cnpj               String           @unique
  email              String           @unique
  name               String
  password           String
  phone              String
  rating             Decimal          @default(5.0)
  businessCategory   BusinessCategory
  resetPasswordToken String?

  reviews       Review[]
  opportunities Opportunity[]
}

model Opportunity {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title          String
  description    String
  salary         Decimal
  deadline       DateTime
  weeklyWorkload Int
  isActive       Boolean
  type           OpportunityType

  companyId Int
  company   Company @relation(fields: [companyId], references: [id])

  applicants OpportunityUser[]

  processSteps ProcessStep[]
  jobs         Internship[]
}

model OpportunityUser {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId Int
  user   User @relation(fields: [userId], references: [id])

  opportunityId Int
  opportunity   Opportunity @relation(fields: [opportunityId], references: [id])

  @@id([userId, opportunityId])
}

model ProcessStep {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title          String
  description    String
  deadline       DateTime
  onlyOnDeadline Boolean

  opportunityId Int
  opportunity   Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  applicants User[]
}

model Review {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  description String
  rating      Decimal

  studentId Int
  student   User @relation(fields: [studentId], references: [id])

  companyId Int
  company   Company @relation(fields: [companyId], references: [id])
}

model Internship {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  initialDate DateTime
  until       DateTime
  managerName String
  advisorName String

  studentId Int  @unique
  student   User @relation(fields: [studentId], references: [id])

  jobId Int
  job   Opportunity @relation(fields: [jobId], references: [id])
}
