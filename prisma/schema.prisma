generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CompanyField {
  AUTOMOBILISTICO
  BANCO
  BENS_DE_CONSUMO
  COMIDAS_BEBIDAS
  EDUCACAO
  EMPREITEIRA
  FARMACEUTICO_QUIMICOS
  HOSPITAL_PLANO_DE_SAUDE
  INDUSTRIA
  LOGISTICA
  MIDIA_PROPAGANDA
  ONG
  PETROLEO_ENERGIA_AMBIENTAIS
  SAUDE_BEM_ESTAR
  SEGURADORA
  SERVICOS_FINANCEIROS
  VAREJO
  TI_TELECOMUNICACOES
}

enum OpportunityType {
  REMOTE
  LOCAL
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email    String   @unique
  name     String
  password String
  birthday DateTime

  reviews       Review[]
  opportunities OpportunityUser[]
  processSteps  ProcessStepUser[]
  internship    Internship?       @relation("student_internship")
}

model Company {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cnpj     String  @unique
  email    String  @unique
  name     String
  password String
  phone    String
  rating   Decimal

  reviews       Review[]
  opportunities Opportunity[]
}

model Opportunity {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title          String
  description    String
  salary         Decimal
  deadline       DateTime
  weeklyWorkload Int
  type           OpportunityType

  companyId Int
  company   Company @relation(fields: [companyId], references: [id])

  applicants OpportunityUser[]

  processSteps ProcessStep[]
  job          Internship?
}

model OpportunityUser {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId Int
  user   User @relation(fields: [userId], references: [id])

  opportunityId Int
  opportunity   Opportunity @relation(fields: [opportunityId], references: [id])

  @@id([userId, opportunityId])
}

model ProcessStep {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title          String
  description    String
  deadline       DateTime
  onlyOnDeadline Boolean

  opportunityId Int
  opportunity   Opportunity @relation(fields: [opportunityId], references: [id])

  applicants ProcessStepUser[]
}

model ProcessStepUser {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId Int
  user   User @relation(fields: [userId], references: [id])

  processStepId Int
  ProcessStep   ProcessStep @relation(fields: [processStepId], references: [id])

  @@id([userId, processStepId])
}

model Review {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  description String

  studentId Int
  student   User @relation(fields: [studentId], references: [id])

  companyId Int
  company   Company @relation(fields: [companyId], references: [id])
}

model Internship {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  initialDate DateTime
  until       DateTime
  managerName String
  isApproved  Boolean

  studentId Int  @unique
  student   User @relation("student_internship", fields: [studentId], references: [id])

  jobId Int         @unique
  job   Opportunity @relation(fields: [jobId], references: [id])
}
